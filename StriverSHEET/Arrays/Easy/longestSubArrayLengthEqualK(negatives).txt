#include<map>
#include<algorithm>

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {

       int maxLen = 0; //return 0 if not present is mentioned
       map<long long , int> prefixSum;
       long long sum = 0;
       //traverse the array 
       for(int i = 0;i < nums.size();i++){
      
        sum += nums[i];
        // for first element case
        if(sum == k){
           
            maxLen = max(maxLen, i+1);


        }
       // reverse engineering that is instead of checking for subarray with sum k we will check if subarry with sum x-k exist
       long long rem = sum -k;
       if(prefixSum.find(rem) != prefixSum.end()){
        //x-k hai matlab hi iske aage wala subarrray hai jiska sum k ke barabar hai uski length find karo ab 
        int currLen = i - prefixSum[rem];
        maxLen = max(maxLen,currLen);
       }
       // ab map me push karna lekin zero ek edge case hai 

       if(prefixSum.find(sum) == prefixSum.end() ){
        // agar pehele nahi tha toh hi push karo (because longest chahiye)
        prefixSum[sum] = i;

       }


       }
       return maxLen;

        
    }
};